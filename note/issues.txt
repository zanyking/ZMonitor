

Thread Monitoring:
	[ISSUES]: How to guarantee the termination of a task monitoring when task is done?
	DEFNIE: managed environment
	An environment which manages task execution and provides filter interface to mimic the execution.
	+. Only a managed environment can guarentee the termination of a monitored sequence.
	+. The relationship between a monitored task and a thread is not always 1 on 1, be cause the app might do thread pooling and invoke various tasks in one thread.
	+. Unmanaged environment can only depends on strict paired operations of push & pop to terminate a monitored sequence.

	[SOLUTIONS]:
	+. ZMonitor can provides API for manual MS termination:
		pseudo code:
		ZMonitor.start();	
		try{
			//TODO with logging...
		}finally{
			ZMonitor.finish();	
		}

	+. ZMonitor can leverage Java Instrumentation technology to provide a mechanism which depends on adding additional code to the task run method and terminate a zmonitor at the end of a task.
		pseudo code:
		ZMonitor.start();
		try{
			//Original method body
		}finally{
			ZMonitor.finish();
		}


	+. When used behind a logger, ZMonitor can provides a configurable key pattern and let user be able to terminate current monitor through logging method call.
		pseudo code:
		logger.info("@zmonitor.start");// or simply: "|>>"
		try{
			logger.info("@zmonitor.push");// or simply: ">>"
			logger.info("@zmonitor.pop");// or simply: "<<"
		}finally{
			logger.info("@zmonitor.stop");// or simply: "|<<"
		}
		
	ISSUE: Where we store the zmonitor instance?
	+. ThreadLocal is the most intuitive place, in Servlet or web app, 
	+. even we don't store the 

